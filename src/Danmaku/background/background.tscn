[gd_scene load_steps=6 format=2]

[ext_resource path="res://src/Danmaku/background/background.gd" type="Script" id=1]
[ext_resource path="res://res/spr/static/rgb.png" type="Texture" id=2]
[ext_resource path="res://res/img/danmaku_scroll.png" type="Texture" id=3]

[sub_resource type="Shader" id=1]

code = "shader_type canvas_item;

uniform bool enable_glitch = true;
uniform bool transparency_to_black = true;
uniform float block_thresh_modifier = 0.2;
uniform float line_thresh_modifier = 0.7;
uniform float block_dist_modifier = 0.35;
uniform sampler2D iChannel1;

void fragment(){
	if (enable_glitch){
		vec2 uv = UV.xy;
		vec2 block = floor(FRAGCOORD.xy / vec2(16));
		vec2 uv_noise = block / vec2(64);
		uv_noise += floor(vec2(TIME) * vec2(1234.0, 3543.0)) / vec2(64);
		
		float block_thresh = pow(fract(TIME * 1236.0453), 2.0) * block_thresh_modifier;
		float line_thresh = pow(fract(TIME * 2236.0453), 3.0) * line_thresh_modifier;
		
		vec2 uv_r = uv, uv_g = uv, uv_b = uv;
	
		// glitch some blocks and lines
		if (texture(iChannel1, uv_noise).r < block_thresh ||
			texture(iChannel1, vec2(uv_noise.y, 0.0)).g < line_thresh) {
	
			vec2 dist = (fract(uv_noise) - 0.5) * block_dist_modifier;
			uv_r += dist * 0.1;
			uv_g += dist * 0.2;
			uv_b += dist * 0.125;
		}
	
		COLOR.r = texture(TEXTURE, uv_r).r;
		COLOR.g = texture(TEXTURE, uv_g).g;
		COLOR.b = texture(TEXTURE, uv_b).b;
	
		// loose luma for some blocks
		if (texture(iChannel1, uv_noise).g < block_thresh)
			COLOR.rgb = COLOR.ggg;
	
		// discolor block lines
		if (texture(iChannel1, vec2(uv_noise.y, 0.0)).b * 3.5 < line_thresh)
			COLOR.rgb = vec3(0.0, dot(COLOR.rgb, vec3(1.0)), 0.0);
	
		// interleave lines in some blocks
		if (texture(iChannel1, uv_noise).g * 1.5 < block_thresh ||
			texture(iChannel1, vec2(uv_noise.y, 0.0)).g * 2.5 < line_thresh) {
			float line = fract(FRAGCOORD.y / 3.0);
			vec3 mask = vec3(3.0, 0.0, 0.0);
			if (line > 0.333)
				mask = vec3(0.0, 3.0, 0.0);
			if (line > 0.666)
				mask = vec3(0.0, 0.0, 3.0);
			
			COLOR.xyz *= mask;
			
		}
		if(!transparency_to_black)
			COLOR.a = texture(TEXTURE, UV).a;
	} else {
		COLOR = texture(TEXTURE, UV);
	}
}"

[sub_resource type="ShaderMaterial" id=2]

render_priority = 0
shader = SubResource( 1 )
shader_param/enable_glitch = false
shader_param/transparency_to_black = false
shader_param/block_thresh_modifier = 0.0
shader_param/line_thresh_modifier = 0.0
shader_param/block_dist_modifier = 0.0
shader_param/iChannel1 = ExtResource( 2 )
_sections_unfolded = [ "shader_param" ]

[node name="Background" type="Node2D"]

script = ExtResource( 1 )
_sections_unfolded = [ "Material", "Visibility" ]
camera = NodePath("ParallaxBackground/Camera2D")

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]

layer = -1
offset = Vector2( 0, 0 )
rotation = 0.0
scale = Vector2( 1, 1 )
scroll_offset = Vector2( 0, 0 )
scroll_base_offset = Vector2( 0, 0 )
scroll_base_scale = Vector2( 1, 1 )
scroll_limit_begin = Vector2( 0, 0 )
scroll_limit_end = Vector2( 0, 0 )
scroll_ignore_camera_zoom = false
_sections_unfolded = [ "Scroll" ]

[node name="Camera2D" type="Camera2D" parent="ParallaxBackground"]

position = Vector2( 299.2, 359.471 )
anchor_mode = 1
rotating = false
current = true
zoom = Vector2( 1, 1 )
limit_left = -10000000
limit_top = -10000000
limit_right = 10000000
limit_bottom = 10000000
limit_smoothed = false
drag_margin_h_enabled = true
drag_margin_v_enabled = true
smoothing_enabled = true
smoothing_speed = 10.0
drag_margin_left = 0.2
drag_margin_top = 0.2
drag_margin_right = 0.2
drag_margin_bottom = 0.2
editor_draw_screen = true
editor_draw_limits = false
editor_draw_drag_margin = false
_sections_unfolded = [ "Smoothing" ]

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]

motion_scale = Vector2( 1, -1 )
motion_offset = Vector2( 0, 0 )
motion_mirroring = Vector2( 0, 11776 )
_sections_unfolded = [ "Material", "Motion" ]

[node name="Sprite" type="Sprite" parent="ParallaxBackground/ParallaxLayer"]

material = SubResource( 2 )
texture = ExtResource( 3 )
centered = false
_sections_unfolded = [ "Material", "Offset", "Visibility" ]


