[gd_scene load_steps=12 format=2]

[ext_resource path="res://src/Platformer/portal.gd" type="Script" id=1]
[ext_resource path="res://res/spr/platformer/portal_1.png" type="Texture" id=2]
[ext_resource path="res://res/spr/platformer/portal_0.png" type="Texture" id=3]
[ext_resource path="res://res/spr/static/rgb.png" type="Texture" id=4]
[ext_resource path="res://res/spr/platformer/portal_2.png" type="Texture" id=5]

[sub_resource type="Shader" id=1]

code = "shader_type canvas_item;

uniform bool enable_scanline = true;
uniform bool transparency_to_black = true;
uniform float blur_modifier_one = 0.5;
uniform float blur_modifier_two = 0.5;
uniform float blur_modifier_three = 3.0;
uniform float blur_modifier_four = 0.05;
uniform float scanline_modifier = 0.04;
uniform float color_modifier = 0.5;

void fragment(){
	if(enable_scanline){
		float a = COLOR.a;
		float d = length(UV - vec2(0.5,0.5));
		float blur = 0.0;
		blur = (1.0 + sin(TIME*6.0)) * blur_modifier_one;
		blur *= 1.0 + sin(TIME*16.0) * blur_modifier_two;
		blur = pow(blur, blur_modifier_three);
		blur *= blur_modifier_four;
	
		blur *= d;
		
	    vec3 col;
	    col.r = texture( TEXTURE, vec2(UV.x+blur,UV.y) ).r;
	    col.g = texture( TEXTURE, UV ).g;
	    col.b = texture( TEXTURE, vec2(UV.x-blur,UV.y) ).b;
		
		float scanline = sin(UV.y*800.0)*scanline_modifier;
		col -= scanline;
		
		col *= 1.0 - d * color_modifier;
		
		if(transparency_to_black)
	    	COLOR = vec4(col,a);
		else
			COLOR = vec4(col,texture( TEXTURE, UV ).a);
	} else {
		COLOR = texture(TEXTURE, UV);
	}
}
"

[sub_resource type="ShaderMaterial" id=2]

shader = SubResource( 1 )
shader_param/enable_scanline = true
shader_param/transparency_to_black = false
shader_param/blur_modifier_one = 2.0
shader_param/blur_modifier_two = 2.0
shader_param/blur_modifier_three = 5.0
shader_param/blur_modifier_four = 5.0
shader_param/scanline_modifier = 1.5
shader_param/color_modifier = 2.0
_sections_unfolded = [ "shader_param" ]

[sub_resource type="Shader" id=3]

code = "shader_type canvas_item;

uniform bool enable_glitch = true;
uniform bool transparency_to_black = true;
uniform float block_thresh_modifier = 0.2;
uniform float line_thresh_modifier = 0.7;
uniform float block_dist_modifier = 0.35;
uniform sampler2D iChannel1;

void fragment(){
	if (enable_glitch){
		vec2 uv = UV.xy;
		vec2 block = floor(FRAGCOORD.xy / vec2(16));
		vec2 uv_noise = block / vec2(64);
		uv_noise += floor(vec2(TIME) * vec2(1234.0, 3543.0)) / vec2(64);
		
		float block_thresh = pow(fract(TIME * 1236.0453), 2.0) * block_thresh_modifier;
		float line_thresh = pow(fract(TIME * 2236.0453), 3.0) * line_thresh_modifier;
		
		vec2 uv_r = uv, uv_g = uv, uv_b = uv;
	
		// glitch some blocks and lines
		if (texture(iChannel1, uv_noise).r < block_thresh ||
			texture(iChannel1, vec2(uv_noise.y, 0.0)).g < line_thresh) {
	
			vec2 dist = (fract(uv_noise) - 0.5) * block_dist_modifier;
			uv_r += dist * 0.1;
			uv_g += dist * 0.2;
			uv_b += dist * 0.125;
		}
	
		COLOR.r = texture(TEXTURE, uv_r).r;
		COLOR.g = texture(TEXTURE, uv_g).g;
		COLOR.b = texture(TEXTURE, uv_b).b;
	
		// loose luma for some blocks
		if (texture(iChannel1, uv_noise).g < block_thresh)
			COLOR.rgb = COLOR.ggg;
	
		// discolor block lines
		if (texture(iChannel1, vec2(uv_noise.y, 0.0)).b * 3.5 < line_thresh)
			COLOR.rgb = vec3(0.0, dot(COLOR.rgb, vec3(1.0)), 0.0);
	
		// interleave lines in some blocks
		if (texture(iChannel1, uv_noise).g * 1.5 < block_thresh ||
			texture(iChannel1, vec2(uv_noise.y, 0.0)).g * 2.5 < line_thresh) {
			float line = fract(FRAGCOORD.y / 3.0);
			vec3 mask = vec3(3.0, 0.0, 0.0);
			if (line > 0.333)
				mask = vec3(0.0, 3.0, 0.0);
			if (line > 0.666)
				mask = vec3(0.0, 0.0, 3.0);
			
			COLOR.xyz *= mask;
			
		}
		if(!transparency_to_black)
			COLOR.a = texture(TEXTURE, UV).a;
	} else {
		COLOR = texture(TEXTURE, UV);
	}
}"

[sub_resource type="ShaderMaterial" id=4]

shader = SubResource( 3 )
shader_param/enable_glitch = true
shader_param/transparency_to_black = false
shader_param/block_thresh_modifier = 2.0
shader_param/line_thresh_modifier = 2.0
shader_param/block_dist_modifier = 2.0
shader_param/iChannel1 = ExtResource( 4 )
_sections_unfolded = [ "shader_param" ]

[sub_resource type="CircleShape2D" id=5]

custom_solver_bias = 0.0
radius = 185.447

[sub_resource type="Animation" id=6]

length = 1.0
loop = true
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite2:rotation_deg")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 0.0507658 ),
"update": 0,
"values": [ 0.0, 359.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Sprite:rotation_deg")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( -0.25, 1 ),
"update": 0,
"values": [ 0.0, 359.0 ]
}

[node name="Portal" type="Area2D"]

input_pickable = true
gravity_vec = Vector2( 0, 1 )
gravity = 98.0
linear_damp = 0.1
angular_damp = 1.0
collision_layer = 2
collision_mask = 2
audio_bus_override = false
audio_bus_name = "Master"
script = ExtResource( 1 )
_sections_unfolded = [ "Collision" ]

[node name="Sprite" type="Sprite" parent="."]

material = SubResource( 2 )
rotation = 3.02111
texture = ExtResource( 2 )
_sections_unfolded = [ "Material", "Transform" ]

[node name="Sprite2" type="Sprite" parent="."]

rotation = 2.60522
texture = ExtResource( 3 )
_sections_unfolded = [ "Transform" ]

[node name="Sprite3" type="Sprite" parent="."]

material = SubResource( 4 )
texture = ExtResource( 5 )
_sections_unfolded = [ "Material", "Visibility" ]

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]

shape = SubResource( 5 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]

playback_process_mode = 1
playback_default_blend_time = 0.0
root_node = NodePath("..")
anims/Animation = SubResource( 6 )
playback/active = true
playback/speed = 1.0
blend_times = [  ]
autoplay = ""
_sections_unfolded = [ "Playback", "playback" ]


